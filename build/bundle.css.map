{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import { onMount } from \"svelte/internal\";\nlet TICK_DELAY = 200;\nlet GRID_ROWS = Math.floor((document.documentElement.clientHeight / 20) * 0.75);\nlet GRID_COLS = Math.floor((document.documentElement.clientWidth / 20) * 0.85);\nlet SNAKE_HEAD = 0;\nlet lost = false;\nlet grid = [...Array(GRID_ROWS)].map(() => [...Array(GRID_COLS)].map(() => \"empty\"));\nlet snakePosition = [[2, 3]];\nlet direction = [0, 1];\nlet gridWithSnake = grid;\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\nfunction randomFood() {\n    grid[getRandomInt(GRID_ROWS)][getRandomInt(GRID_COLS)] = \"food\";\n    grid[getRandomInt(GRID_ROWS)][getRandomInt(GRID_COLS)] = \"food\";\n}\nrandomFood();\n$: {\n    for (let i = 0; i < GRID_ROWS; i++) {\n        for (let k = 0; k < GRID_COLS; k++) {\n            if (gridWithSnake[i][k] === \"snake\") {\n                gridWithSnake[i][k] = \"empty\";\n            }\n        }\n    }\n    snakePosition.forEach(([x, y]) => {\n        gridWithSnake[x][y] = \"snake\";\n    });\n}\nconst fn = (n) => {\n    setTimeout(() => {\n        const [x, y] = snakePosition[SNAKE_HEAD];\n        const [dx, dy] = direction;\n        const newHead = [dx + x, y + dy];\n        console.log('new head', newHead);\n        function isOutOfBoundsRows(n) {\n            return n < 0 || n > GRID_ROWS - 1;\n        }\n        function isOutOfBoundsCol(n) {\n            return n < 0 || n > GRID_COLS - 1;\n        }\n        if (\n        // row\n        isOutOfBoundsRows(newHead[0]) ||\n            // col\n            isOutOfBoundsCol(newHead[1])) {\n            lost = true;\n            return;\n        }\n        let ateFood = false;\n        if (gridWithSnake[newHead[0]][newHead[1]] === \"food\") {\n            ateFood = true;\n            randomFood();\n        }\n        const snakeBody = snakePosition.slice(0, snakePosition.length - (ateFood ? 0 : 1));\n        if (snakeBody.some((x) => x[0] === newHead[0] && x[1] === newHead[1])) {\n            lost = true;\n            return;\n        }\n        snakePosition = [newHead, ...snakeBody];\n        fn(TICK_DELAY - Math.min(snakePosition.length, 15) * 10);\n    }, n);\n};\nonMount(() => {\n    fn(TICK_DELAY);\n});\nfunction restart() {\n    snakePosition = [[2, 3]];\n    direction = [0, 1];\n    grid = [...Array(GRID_ROWS)].map(() => [...Array(GRID_COLS)].map(() => \"empty\"));\n    gridWithSnake = grid;\n    randomFood();\n    lost = false;\n    fn(TICK_DELAY);\n}\n</script>\n\n<style>\n  .square {\n    width: 20px;\n    height: 20px;\n    border: solid 1px #fff;\n  }\n  .empty {\n    background-color: black;\n  }\n  .food {\n    background-color: pink;\n  }\n  .snake {\n    background-color: green;\n  }\n  .row {\n    display: flex;\n  }\n  .center {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .tcenter {\n    text-align: center;\n  }\n  .restart {\n    margin-top: 10px;\n  }\n\n  .enter {\n    border: #000 1px solid;\n    background-color: #eee;\n    border-radius: 2px;\n    padding: 5px;\n  }\n</style>\n\n<svelte:window\n  on:keydown={(e) => {\n    switch (e.key) {\n      case 'ArrowLeft':\n        direction = [0, -1];\n        break;\n      case 'ArrowRight':\n        direction = [0, 1];\n        break;\n      case 'ArrowUp':\n        direction = [-1, 0];\n        break;\n      case 'ArrowDown':\n        direction = [1, 0];\n        break;\n      case 'Enter':\n        restart();\n        break;\n    }\n  }} />\n\n<main>\n  {#if lost}\n    <h1 class=\"tcenter\">you lost</h1>\n    <h3 class=\"tcenter\">Hit <code class=\"enter\">ENTER</code> to restart</h3>\n  {/if}\n  <h3 class=\"tcenter\">snake length {snakePosition.length}</h3>\n  <div class=\"center\">\n    <div>\n      {#each gridWithSnake as row, i}\n        <div class=\"row\">\n          {#each row as cell, k}\n            <div\n              on:click={() => (grid[i][k] = 'food')}\n              class={`square ${cell}`} />\n          {/each}\n        </div>\n      {/each}\n    </div>\n  </div>\n\n  {#if lost}\n    <div class=\"center restart\">\n      <button on:click={restart}> Start again </button>\n    </div>\n  {/if}\n</main>\n"
  ],
  "names": [],
  "mappings": "AA+EE,OAAO,eAAC,CAAC,AACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,IAAI,AACxB,CAAC,AACD,MAAM,eAAC,CAAC,AACN,gBAAgB,CAAE,KAAK,AACzB,CAAC,AACD,KAAK,eAAC,CAAC,AACL,gBAAgB,CAAE,IAAI,AACxB,CAAC,AACD,MAAM,eAAC,CAAC,AACN,gBAAgB,CAAE,KAAK,AACzB,CAAC,AACD,IAAI,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,AACf,CAAC,AACD,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,AACrB,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,IAAI,CAAC,GAAG,CAAC,KAAK,CACtB,gBAAgB,CAAE,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,GAAG,AACd,CAAC"
}